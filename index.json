{
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.RoomEntryZone.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.RoomEntryZone.html",
    "title": "Class RoomEntryZone | |",
    "keywords": "Class RoomEntryZone Namespace Studio23.SS2.AddressableChunkLoaderSystem.Core public class RoomEntryZone : MonoBehaviour Inheritance object RoomEntryZone"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.RoomInstance.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.RoomInstance.html",
    "title": "Class RoomInstance | |",
    "keywords": "Class RoomInstance Namespace Studio23.SS2.AddressableChunkLoaderSystem.Core public class RoomInstance : MonoBehaviour Inheritance object RoomInstance Fields _defaultPlayerSpawnPoint public Transform _defaultPlayerSpawnPoint Field Value Transform _room public RoomData _room Field Value RoomData Properties DoesRoomPosMatch public bool DoesRoomPosMatch { get; } Property Value bool"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.RoomLoadHandle.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.RoomLoadHandle.html",
    "title": "Class RoomLoadHandle | |",
    "keywords": "Class RoomLoadHandle Namespace Studio23.SS2.AddressableChunkLoaderSystem.Core public class RoomLoadHandle Inheritance object RoomLoadHandle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields UnloadTimer public FiniteTimer UnloadTimer Field Value FiniteTimer Properties LoadHandle The addressable async handle for loading the room. This can be null when this room is not loaded as an addressable public AsyncOperationHandle<SceneInstance> LoadHandle { get; } Property Value AsyncOperationHandle<SceneInstance> Room public RoomData Room { get; } Property Value RoomData ShouldBeLoaded public bool ShouldBeLoaded { get; } Property Value bool UnloadHandle The addressable async handle for unloading the room. This can be null when this room is not loaded as an addressable public AsyncOperationHandle<SceneInstance> UnloadHandle { get; } Property Value AsyncOperationHandle<SceneInstance> UsesAddressable public bool UsesAddressable { get; } Property Value bool Methods AddFlag(RoomFlag) public bool AddFlag(RoomFlag flags) Parameters flags RoomFlag Returns bool AddressableLoad(RoomData, bool, RoomFlag, LoadSceneMode, bool, int) Use this when this room will be loaded as an addressable. public static RoomLoadHandle AddressableLoad(RoomData room, bool isInterior, RoomFlag flags, LoadSceneMode loadSceneMode, bool activateOnLoad, int priority) Parameters room RoomData isInterior bool flags RoomFlag loadSceneMode LoadSceneMode activateOnLoad bool priority int Returns RoomLoadHandle Cleanup() public void Cleanup() ForAlreadyLoadedScene(RoomData, RoomFlag, bool) Use this when this room will be not loaded as an addressable. Ex: As the initial scene you have when you hit playmode public static RoomLoadHandle ForAlreadyLoadedScene(RoomData room, RoomFlag flags, bool isInterior) Parameters room RoomData flags RoomFlag isInterior bool Returns RoomLoadHandle GetLoadingPercentage() public float GetLoadingPercentage() Returns float HasFlag(RoomFlag) public bool HasFlag(RoomFlag flags) Parameters flags RoomFlag Returns bool HasLoaded() public bool HasLoaded() Returns bool IsLoaded() public bool IsLoaded() Returns bool LoadScene() public UniTask LoadScene() Returns UniTask RemoveFlag(RoomFlag) public void RemoveFlag(RoomFlag flags) Parameters flags RoomFlag ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. UnloadScene() public UniTask UnloadScene() Returns UniTask"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.RoomLoadLogCategory.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.RoomLoadLogCategory.html",
    "title": "Enum RoomLoadLogCategory | |",
    "keywords": "Enum RoomLoadLogCategory Namespace Studio23.SS2.AddressableChunkLoaderSystem.Core [Flags] public enum RoomLoadLogCategory Fields AddFlag = 512 FloorEnter = 4 FloorExit = 8 HandleCreation = 256 Load = 16 MustLoad = 128 RemoveFlag = 1024 RoomEntry = 1 RoomExit = 2 Unload = 32"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.RoomLoader.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.RoomLoader.html",
    "title": "Class RoomLoader | |",
    "keywords": "Class RoomLoader Namespace Studio23.SS2.AddressableChunkLoaderSystem.Core public class RoomLoader : MonoBehaviour, ISubLoggerMixin<RoomLoadLogCategory> Inheritance object RoomLoader Implements ISubLoggerMixin<RoomLoadLogCategory> Properties Logger public ICategoryLogger<RoomLoadLogCategory> Logger { get; } Property Value ICategoryLogger<RoomLoadLogCategory> RoomExteriorLoadHandles public Dictionary<RoomData, RoomLoadHandle> RoomExteriorLoadHandles { get; } Property Value Dictionary<RoomData, RoomLoadHandle> RoomInteriorLoadHandles public Dictionary<RoomData, RoomLoadHandle> RoomInteriorLoadHandles { get; } Property Value Dictionary<RoomData, RoomLoadHandle> Methods AddExteriorLoadRequest(RoomLoadRequestData, RoomFlag) public RoomLoadHandle AddExteriorLoadRequest(RoomLoadRequestData loadRequest, RoomFlag flags) Parameters loadRequest RoomLoadRequestData flags RoomFlag Returns RoomLoadHandle AddHandleForAlreadyLoadedRoom(RoomData, RoomFlag) public void AddHandleForAlreadyLoadedRoom(RoomData room, RoomFlag flags) Parameters room RoomData flags RoomFlag AddInteriorLoadRequest(RoomLoadRequestData, RoomFlag) public RoomLoadHandle AddInteriorLoadRequest(RoomLoadRequestData loadRequest, RoomFlag flags) Parameters loadRequest RoomLoadRequestData flags RoomFlag Returns RoomLoadHandle Awake() protected void Awake() GetExteriorLoadingPercentage(RoomData) public float GetExteriorLoadingPercentage(RoomData data) Parameters data RoomData Returns float GetInteriorLoadingPercentage(RoomData) public float GetInteriorLoadingPercentage(RoomData data) Parameters data RoomData Returns float RemoveRoomExteriorLoadFlag(RoomData, RoomFlag) public void RemoveRoomExteriorLoadFlag(RoomData room, RoomFlag flags) Parameters room RoomData flags RoomFlag RemoveRoomInteriorLoadFlag(RoomData, RoomFlag) public void RemoveRoomInteriorLoadFlag(RoomData room, RoomFlag flags) Parameters room RoomData flags RoomFlag UpdateRoomUnloadTimer() public void UpdateRoomUnloadTimer() Events OnRoomExteriorLoaded public event Action<RoomData> OnRoomExteriorLoaded Event Type Action<RoomData> OnRoomExteriorUnloaded public event Action<RoomData> OnRoomExteriorUnloaded Event Type Action<RoomData> OnRoomInteriorLoaded public event Action<RoomData> OnRoomInteriorLoaded Event Type Action<RoomData> OnRoomInteriorUnloaded public event Action<RoomData> OnRoomInteriorUnloaded Event Type Action<RoomData>"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.RoomManager.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.RoomManager.html",
    "title": "Class RoomManager | |",
    "keywords": "Class RoomManager Namespace Studio23.SS2.AddressableChunkLoaderSystem.Core public class RoomManager : MonoBehaviourSingletonPersistent<RoomManager> Inheritance object RoomManager Fields Player public Transform Player Field Value Transform Properties CurrentEnteredRoom public RoomData CurrentEnteredRoom { get; } Property Value RoomData CurrentFloor public FloorData CurrentFloor { get; } Property Value FloorData Logger public ICategoryLogger<RoomLoadLogCategory> Logger { get; } Property Value ICategoryLogger<RoomLoadLogCategory> RoomLoader public RoomLoader RoomLoader { get; } Property Value RoomLoader Methods EnterRoom(RoomData, bool, bool) public UniTask EnterRoom(RoomData room, bool forceLoadIfMissing = false, bool waitForDependencies = false) Parameters room RoomData forceLoadIfMissing bool waitForDependencies bool Returns UniTask HandleRoomEnteredLoadingRange(RoomData) public void HandleRoomEnteredLoadingRange(RoomData room) Parameters room RoomData HandleRoomExitedLoadingRange(RoomData) public void HandleRoomExitedLoadingRange(RoomData room) Parameters room RoomData Initialize() protected override void Initialize() IsRoomExteriorLoaded(RoomData) Returns if the exterior for the room is loaded NOTE: For rooms with invalid exterior scene asset ref, this returns false public bool IsRoomExteriorLoaded(RoomData roomData) Parameters roomData RoomData Returns bool IsRoomInteriorLoaded(RoomData) Returns if the exterior for the room is loaded NOTE: For rooms with invalid exterior scene asset ref, this returns false public bool IsRoomInteriorLoaded(RoomData roomData) Parameters roomData RoomData Returns bool LoadingPercentageForRoom(RoomData, bool, bool) public float LoadingPercentageForRoom(RoomData room, bool considerInterior, bool includeMustLoadRooms) Parameters room RoomData considerInterior bool includeMustLoadRooms bool Returns float RemoveExteriorRoomFlag(RoomData, RoomFlag) public void RemoveExteriorRoomFlag(RoomData room, RoomFlag flags) Parameters room RoomData flags RoomFlag RemoveInteriorRoomFlag(RoomData, RoomFlag) public void RemoveInteriorRoomFlag(RoomData room, RoomFlag flags) Parameters room RoomData flags RoomFlag SetRoomAsMustLoad(RoomData) public void SetRoomAsMustLoad(RoomData room) Parameters room RoomData UnloadAllRooms() public UniTask UnloadAllRooms() Returns UniTask UnsetRoomAsMustLoad(RoomData) public void UnsetRoomAsMustLoad(RoomData room) Parameters room RoomData Events OnFloorEntered public event Action<FloorData> OnFloorEntered Event Type Action<FloorData> OnFloorExited public event Action<FloorData> OnFloorExited Event Type Action<FloorData> OnRoomEntered Fired when room entered and loaded NOTE: DOES NOT FIRE IF THE ROOM'S FLOOR IS NOT IN _allFloors EX: STAIRS DIRECTLY SUB TO THE SCRIPTABLE IN SUCH CASES public event Action<RoomData> OnRoomEntered Event Type Action<RoomData> OnRoomExited Fired when room entered and loaded NOTE: DOES NOT FIRE IF THE ROOM'S FLOOR IS NOT IN _allFloors EX: STAIRS DIRECTLY SUB TO THE SCRIPTABLE IN SUCH CASES public event Action<RoomData> OnRoomExited Event Type Action<RoomData>"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Core.html",
    "title": "Namespace Studio23.SS2.AddressableChunkLoaderSystem.Core | |",
    "keywords": "Namespace Studio23.SS2.AddressableChunkLoaderSystem.Core Classes RoomEntryZone RoomInstance RoomLoadHandle RoomLoader RoomManager Enums RoomLoadLogCategory"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Data.FloorData.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Data.FloorData.html",
    "title": "Class FloorData | |",
    "keywords": "Class FloorData Namespace Studio23.SS2.AddressableChunkLoaderSystem.Data public class FloorData : ScriptableObject Inheritance object FloorData Fields AlwaysLoadRooms public List<RoomData> AlwaysLoadRooms Field Value List<RoomData> RoomsInFloor public List<RoomData> RoomsInFloor Field Value List<RoomData> Methods HandleFloorEntered() public void HandleFloorEntered() HandleFloorExited() public void HandleFloorExited() Initialize() public void Initialize() WantsToAlwaysLoad(RoomData) public bool WantsToAlwaysLoad(RoomData room) Parameters room RoomData Returns bool Events OnFloorEntered public event Action<FloorData> OnFloorEntered Event Type Action<FloorData> OnFloorExited public event Action<FloorData> OnFloorExited Event Type Action<FloorData>"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Data.RoomData.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Data.RoomData.html",
    "title": "Class RoomData | |",
    "keywords": "Class RoomData Namespace Studio23.SS2.AddressableChunkLoaderSystem.Data public class RoomData : ScriptableObject Inheritance object RoomData Fields ExteriorScene public AssetReference ExteriorScene Field Value AssetReference InteriorScene public AssetReference InteriorScene Field Value AssetReference MinUnloadTimeout public float MinUnloadTimeout Field Value float RoomLoadRadius public float RoomLoadRadius Field Value float SetExteriorAsActiveSceneOnLoad public bool SetExteriorAsActiveSceneOnLoad Field Value bool WorldPosition public Vector3 WorldPosition Field Value Vector3 Properties AlwaysLoadRooms public List<RoomData> AlwaysLoadRooms { get; } Property Value List<RoomData> Floor public FloorData Floor { get; } Property Value FloorData Methods CanBeLoaded(Vector3) public virtual bool CanBeLoaded(Vector3 playerPosition) Parameters playerPosition Vector3 Returns bool HandleExteriorUnloaded() public void HandleExteriorUnloaded() HandleRoomDependenciesLoaded() public void HandleRoomDependenciesLoaded() HandleRoomEntered() public void HandleRoomEntered() HandleRoomExited() public void HandleRoomExited() HandleRoomExteriorLoaded() public void HandleRoomExteriorLoaded() HandleRoomInteriorLoaded() public void HandleRoomInteriorLoaded() HandleRoomInteriorUnloaded() public void HandleRoomInteriorUnloaded() Initialize(FloorData) public void Initialize(FloorData floor) Parameters floor FloorData IsPlayerInLoadingRange(Vector3) public virtual bool IsPlayerInLoadingRange(Vector3 playerPosition) Parameters playerPosition Vector3 Returns bool WantsToAlwaysLoad(RoomData) public bool WantsToAlwaysLoad(RoomData room) Parameters room RoomData Returns bool Events OnRoomDependenciesLoaded public event Action<RoomData> OnRoomDependenciesLoaded Event Type Action<RoomData> OnRoomEntered public event Action<RoomData> OnRoomEntered Event Type Action<RoomData> OnRoomExited public event Action<RoomData> OnRoomExited Event Type Action<RoomData> OnRoomExteriorLoaded public event Action<RoomData> OnRoomExteriorLoaded Event Type Action<RoomData> OnRoomExteriorUnloaded public event Action<RoomData> OnRoomExteriorUnloaded Event Type Action<RoomData> OnRoomInteriorLoaded public event Action<RoomData> OnRoomInteriorLoaded Event Type Action<RoomData> OnRoomInteriorUnloaded public event Action<RoomData> OnRoomInteriorUnloaded Event Type Action<RoomData>"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Data.RoomFlag.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Data.RoomFlag.html",
    "title": "Enum RoomFlag | |",
    "keywords": "Enum RoomFlag Namespace Studio23.SS2.AddressableChunkLoaderSystem.Data [Flags] public enum RoomFlag Fields IsCurrentFloorMustLoad = 2 IsCurrentRoom = 1 IsCurrentRoomMustLoad = 4 IsGeneralMustLoad = 8 IsInLoadingRange = 16 None = 0"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Data.RoomLoadRequestData.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Data.RoomLoadRequestData.html",
    "title": "Struct RoomLoadRequestData | |",
    "keywords": "Struct RoomLoadRequestData Namespace Studio23.SS2.AddressableChunkLoaderSystem.Data [Serializable] public struct RoomLoadRequestData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors RoomLoadRequestData(RoomData) public RoomLoadRequestData(RoomData roomToLoad = null) Parameters roomToLoad RoomData Fields ActivateOnLoad public bool ActivateOnLoad Field Value bool LoadSceneMode public LoadSceneMode LoadSceneMode Field Value LoadSceneMode Priority public int Priority Field Value int RoomToLoad public RoomData RoomToLoad Field Value RoomData"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Data.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Data.html",
    "title": "Namespace Studio23.SS2.AddressableChunkLoaderSystem.Data | |",
    "keywords": "Namespace Studio23.SS2.AddressableChunkLoaderSystem.Data Classes FloorData RoomData Structs RoomLoadRequestData Enums RoomFlag"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Editor.RoomInstanceEditor.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Editor.RoomInstanceEditor.html",
    "title": "Class RoomInstanceEditor | |",
    "keywords": "Class RoomInstanceEditor Namespace Studio23.SS2.AddressableChunkLoaderSystem.Editor public class RoomInstanceEditor : UnityEditor.Editor Inheritance object RoomInstanceEditor Methods OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Editor.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Editor.html",
    "title": "Namespace Studio23.SS2.AddressableChunkLoaderSystem.Editor | |",
    "keywords": "Namespace Studio23.SS2.AddressableChunkLoaderSystem.Editor Classes RoomInstanceEditor"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.AlwaysLoadRoomTrigger.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.AlwaysLoadRoomTrigger.html",
    "title": "Class AlwaysLoadRoomTrigger | |",
    "keywords": "Class AlwaysLoadRoomTrigger Namespace Studio23.SS2.AddressableChunkLoaderSystem.Sample1 public class AlwaysLoadRoomTrigger : MonoBehaviour Inheritance object AlwaysLoadRoomTrigger Fields Room public RoomData Room Field Value RoomData ShouldLoad public bool ShouldLoad Field Value bool"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.Door.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.Door.html",
    "title": "Class Door | |",
    "keywords": "Class Door Namespace Studio23.SS2.AddressableChunkLoaderSystem.Sample1 public class Door : MonoBehaviour Inheritance object Door Fields HoverMat public Material HoverMat Field Value Material InnerRoom public RoomData InnerRoom Field Value RoomData NormalMat public Material NormalMat Field Value Material OffsetDist public float OffsetDist Field Value float OpeningOffset public Vector3 OpeningOffset Field Value Vector3 OuterRoom public RoomData OuterRoom Field Value RoomData Properties InnerPoint public Vector3 InnerPoint { get; } Property Value Vector3 OuterPoint public Vector3 OuterPoint { get; } Property Value Vector3 Methods DoorCloseAnim() public UniTask DoorCloseAnim() Returns UniTask DoorOpenAnim() public UniTask DoorOpenAnim() Returns UniTask GetPosAfterDoorOpen() public Vector3 GetPosAfterDoorOpen() Returns Vector3 HandleInteractHoverEnd() public void HandleInteractHoverEnd() HandleInteractHoverStart() public void HandleInteractHoverStart() Open() public UniTask Open() Returns UniTask"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.PlayerDetector.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.PlayerDetector.html",
    "title": "Class PlayerDetector | |",
    "keywords": "Class PlayerDetector Namespace Studio23.SS2.AddressableChunkLoaderSystem.Sample1 exmaple class for setting room manager player ref public class PlayerDetector : MonoBehaviour Inheritance object PlayerDetector Fields _player public Transform _player Field Value Transform"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.RoomEventTester.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.RoomEventTester.html",
    "title": "Class RoomEventTester | |",
    "keywords": "Class RoomEventTester Namespace Studio23.SS2.AddressableChunkLoaderSystem.Sample1 public class RoomEventTester : MonoBehaviour Inheritance object RoomEventTester"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.RoomLoadExample.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.RoomLoadExample.html",
    "title": "Class RoomLoadExample | |",
    "keywords": "Class RoomLoadExample Namespace Studio23.SS2.AddressableChunkLoaderSystem.Sample1 public class RoomLoadExample : MonoBehaviourSingletonPersistent<RoomLoadExample> Inheritance object RoomLoadExample Fields RoomData public RoomData RoomData Field Value RoomData RoomDependenciesLoaded public UnityEvent RoomDependenciesLoaded Field Value UnityEvent RoomEnteredAndLoadedEvent public UnityEvent RoomEnteredAndLoadedEvent Field Value UnityEvent UnloadButton public Button UnloadButton Field Value Button Methods Initialize() protected override void Initialize() LoadRoomNonAsync() public void LoadRoomNonAsync() LoadRoomWithDependencies() public UniTask LoadRoomWithDependencies() Returns UniTask UnloadRoomAndReturn() public void UnloadRoomAndReturn()"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.RoomPlayerSpawner.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.RoomPlayerSpawner.html",
    "title": "Class RoomPlayerSpawner | |",
    "keywords": "Class RoomPlayerSpawner Namespace Studio23.SS2.AddressableChunkLoaderSystem.Sample1 public class RoomPlayerSpawner : MonoBehaviour Inheritance object RoomPlayerSpawner Fields playerPrefab public TestPlayerManager playerPrefab Field Value TestPlayerManager roomInstance public RoomInstance roomInstance Field Value RoomInstance"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.SampleLoadingBar.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.SampleLoadingBar.html",
    "title": "Class SampleLoadingBar | |",
    "keywords": "Class SampleLoadingBar Namespace Studio23.SS2.AddressableChunkLoaderSystem.Sample1 public class SampleLoadingBar : MonoBehaviour Inheritance object SampleLoadingBar Fields LoadSlider public Slider LoadSlider Field Value Slider Methods UpdateLoadingBar(RoomData) public UniTask UpdateLoadingBar(RoomData roomData) Parameters roomData RoomData Returns UniTask"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.TestCharacterController.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.TestCharacterController.html",
    "title": "Class TestCharacterController | |",
    "keywords": "Class TestCharacterController Namespace Studio23.SS2.AddressableChunkLoaderSystem.Sample1 public class TestCharacterController : MonoBehaviour Inheritance object TestCharacterController Fields BottomClamp public float BottomClamp Field Value float CinemachineCameraTarget public GameObject CinemachineCameraTarget Field Value GameObject FallTimeout public float FallTimeout Field Value float Gravity public float Gravity Field Value float GroundLayers public LayerMask GroundLayers Field Value LayerMask Grounded public bool Grounded Field Value bool GroundedOffset public float GroundedOffset Field Value float GroundedRadius public float GroundedRadius Field Value float JumpHeight public float JumpHeight Field Value float JumpTimeout public float JumpTimeout Field Value float MoveSpeed public float MoveSpeed Field Value float RotationSpeed public float RotationSpeed Field Value float SpeedChangeRate public float SpeedChangeRate Field Value float SprintSpeed public float SprintSpeed Field Value float TopClamp public float TopClamp Field Value float Methods Toggle(bool) public void Toggle(bool isControllerEnabled) Parameters isControllerEnabled bool"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.TestCharacterInputs.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.TestCharacterInputs.html",
    "title": "Class TestCharacterInputs | |",
    "keywords": "Class TestCharacterInputs Namespace Studio23.SS2.AddressableChunkLoaderSystem.Sample1 public class TestCharacterInputs : MonoBehaviour Inheritance object TestCharacterInputs Fields AnalogMovement public bool AnalogMovement Field Value bool CursorInputForLook public bool CursorInputForLook Field Value bool CursorLocked public bool CursorLocked Field Value bool Jump public bool Jump Field Value bool Look public Vector2 Look Field Value Vector2 Move public Vector2 Move Field Value Vector2 Sprint public bool Sprint Field Value bool Methods JumpInput(bool) public void JumpInput(bool newJumpState) Parameters newJumpState bool LookInput(Vector2) public void LookInput(Vector2 newLookDirection) Parameters newLookDirection Vector2 MoveInput(Vector2) public void MoveInput(Vector2 newMoveDirection) Parameters newMoveDirection Vector2 OnInteract() public void OnInteract() OnInteract(InputValue) public void OnInteract(InputValue value) Parameters value InputValue OnJump(InputValue) public void OnJump(InputValue value) Parameters value InputValue OnLook(InputValue) public void OnLook(InputValue value) Parameters value InputValue OnMove(InputValue) public void OnMove(InputValue value) Parameters value InputValue OnSprint(InputValue) public void OnSprint(InputValue value) Parameters value InputValue SetCursorState(bool) public void SetCursorState(bool newState) Parameters newState bool SprintInput(bool) public void SprintInput(bool newSprintState) Parameters newSprintState bool Events OnInteractPressed public event Action OnInteractPressed Event Type Action"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.TestPlayerManager.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.TestPlayerManager.html",
    "title": "Class TestPlayerManager | |",
    "keywords": "Class TestPlayerManager Namespace Studio23.SS2.AddressableChunkLoaderSystem.Sample1 public class TestPlayerManager : MonoBehaviourSingletonPersistent<TestPlayerManager> Inheritance object TestPlayerManager Fields DoorLayer public LayerMask DoorLayer Field Value LayerMask Inputs public TestCharacterInputs Inputs Field Value TestCharacterInputs MaxRayDistance public float MaxRayDistance Field Value float Player public TestCharacterController Player Field Value TestCharacterController _cam public Camera _cam Field Value Camera Methods Initialize() protected override void Initialize()"
  },
  "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.html": {
    "href": "api/Studio23.SS2.AddressableChunkLoaderSystem.Sample1.html",
    "title": "Namespace Studio23.SS2.AddressableChunkLoaderSystem.Sample1 | |",
    "keywords": "Namespace Studio23.SS2.AddressableChunkLoaderSystem.Sample1 Classes AlwaysLoadRoomTrigger Door PlayerDetector exmaple class for setting room manager player ref RoomEventTester RoomLoadExample RoomPlayerSpawner SampleLoadingBar TestCharacterController TestCharacterInputs TestPlayerManager"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | |",
    "keywords": "Changelog 1.0.1 Moved samples to samples~ 1.0.1 Dependency fix 1.0.0 Initial version of package"
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": "MIT License Copyright (c) 2023 Studio-23 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Addressable Chunk Loader System | |",
    "keywords": "Addressable Chunk Loader System Addressable Chunk Loader is a package for loading rooms(mainly for the castle area) as addressable chunks/scenes for SS2 using addressables. It handles: Loading/Unloading rooms/addressable chunks based on distance from player. Marking rooms/chunks to always keep loaded for particular areas or game needs. Async await API + events for handling room loading/unloading. Scene Setup: Each room has an exterior and an interior scene. Both scenes are addressable. Exterior is loaded when player is in range Interior is loaded when player enters the room(via door or function call) The room interior should have a RoomInstance monobehavior with a RoomEntryZone. RoomEntryZone detects player entry into a trigger collider. You can hit play mode in any interior scene Keep a master scene and bake all scenes with that as the active scene. See lighting notes for details. Room loading: A room can be loaded because: It is in always load list of current room radius distance from player within some threshold. It is in always load list for current room/floor. We may want to add other ways to determine if rooms should be loaded. As long as one system says that a room should be kept loaded, we should keep it loaded. If a room is no longer required at all, it is unloaded after a timer RoomLoader handles actual loading: It keeps a Dictionary<Room, RoomLoadHandle> for exterior and interior Any room that will be loaded/is loaded is in the dicts Once a room needs to be unloaded(timer expired), it is also removed from the dict RoomManager handles loading rooms in player range/ adding/removing must load rooms(based on story reqs or whatever) You can wait till a room is loaded. In the samples, the door does not animate the door until the room is loaded. Usage: Ensure that a RoomManager singleton exists in your scene. Set the player ref on the RoomManager. Use separate exterior and interior scenes per room. The RoomData scriptable stores and uses room world position. The scene root should always be in the room's correct position. When the root position has been moved, go to the RoomInstance object and update the position The gizmos indicate when they don't match to aid you. You are responsible to ensure that the scriptable is updated. Known issues: Don't put the player objects in the rooms if you use RoomEntryZone: If multiple rooms each with RoomEntryZone and player objects are loaded. The roommanager will consider the player to be at the last room. This depends on execution and room dependency order. Don't do it. Sample scenes has a player spawning example that avoids the above scenario . Lighting Notes: Do: Baking workflow: Keep a \"master\" scene containing lightprobes for the other rooms. Load the master scene. Ensure that it is the active scene. Additively load room interior and exterior The additive scenes should share the same light settings asset. Bake. You must do this for any light update. In runtime: As of yet, it doesn't seem necessary to actually load the master scene in runtime after baking. So the package currently just loads assets separately. Do not: Do not bake rooms separately. Do not light probe them separately. Only the master scene should contain the light probes. Note: Unity can handle lightmaps from different additive scenes. But not light probes. The above workflow using a master scene is a workaround for that."
  }
}